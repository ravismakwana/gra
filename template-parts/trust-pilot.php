<?php
if (!function_exists('trust_pilot_post_slider')) {

// Register Custom Post Type
    function trust_pilot_post_slider()
    {

        $labels = array(
            'name' => _x('Reviews', 'Post Type General Name', 'gma'),
            'singular_name' => _x('Review', 'Post Type Singular Name', 'gma'),
            'menu_name' => __('Trust Pilot Reviews', 'gma'),
            'name_admin_bar' => __('Trust Pilot Review', 'gma'),
            'archives' => __('Item Archives', 'gma'),
            'attributes' => __('Item Attributes', 'gma'),
            'parent_item_colon' => __('Parent Item:', 'gma'),
            'all_items' => __('All Items', 'gma'),
            'add_new_item' => __('Add New Item', 'gma'),
            'add_new' => __('Add New', 'gma'),
            'new_item' => __('New Item', 'gma'),
            'edit_item' => __('Edit Item', 'gma'),
            'update_item' => __('Update Item', 'gma'),
            'view_item' => __('View Item', 'gma'),
            'view_items' => __('View Items', 'gma'),
            'search_items' => __('Search Item', 'gma'),
            'not_found' => __('Not found', 'gma'),
            'not_found_in_trash' => __('Not found in Trash', 'gma'),
            'featured_image' => __('Featured Image', 'gma'),
            'set_featured_image' => __('Set featured image', 'gma'),
            'remove_featured_image' => __('Remove featured image', 'gma'),
            'use_featured_image' => __('Use as featured image', 'gma'),
            'insert_into_item' => __('Insert into item', 'gma'),
            'uploaded_to_this_item' => __('Uploaded to this item', 'gma'),
            'items_list' => __('Items list', 'gma'),
            'items_list_navigation' => __('Items list navigation', 'gma'),
            'filter_items_list' => __('Filter items list', 'gma'),
        );
        $args = array(
            'label' => __('Review', 'gma'),
            'description' => __('Trust Pilot Reviews', 'gma'),
            'labels' => $labels,
            'supports' => array('title', 'editor', 'thumbnail'),
            'taxonomies' => array(),
            'hierarchical' => false,
            'public' => true,
            'show_ui' => true,
            'show_in_menu' => true,
            'menu_position' => 5,
            'menu_icon' => 'dashicons-star-filled',
            'show_in_admin_bar' => true,
            'show_in_nav_menus' => true,
            'can_export' => true,
            'has_archive' => true,
            'exclude_from_search' => false,
            'publicly_queryable' => true,
            'capability_type' => 'page',
            'show_in_rest' => false,
        );
        register_post_type('_trust_pilot', $args);

    }

    add_action('init', 'trust_pilot_post_slider', 0);

}

/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 *
 * Retrieving the values:
 * Author Name = get_post_meta( get_the_ID(), '_trust_authorauthor-name', true )
 * Review Date = get_post_meta( get_the_ID(), '_trust_authorreview-date', true )
 * Review Star = get_post_meta( get_the_ID(), '_trust_authorreview-star', true )
 */
class FlatsomeTrustPilotReviews
{
    private $config = '{"title":"Trust Pilot Reviews","description":"Please enter the trust pilot data","prefix":"_trust_author","domain":"gma","class_name":"Flatsome","post-type":["post"],"context":"normal","priority":"default","cpt":"_trust_pilot","fields":[{"type":"text","label":"Author Name","default":"David","id":"_trust_authorauthor-name"},{"type":"date","label":"Review Date","id":"_trust_authorreview-date"},{"type":"select","label":"Review Star","default":"5","options":"0: 0 Star\r\n1: 1 Star\r\n2: 2 Star\r\n3: 3 Star\r\n4: 4 Star\r\n5: 5 Star","id":"_trust_authorreview-star"}]}';

    public function __construct()
    {
        $this->config = json_decode($this->config, true);
        $this->process_cpts();
        add_action('add_meta_boxes', [$this, 'add_meta_boxes']);
        add_action('admin_head', [$this, 'admin_head']);
        add_action('save_post', [$this, 'save_post']);
    }

    public function process_cpts()
    {
        if (!empty($this->config['cpt'])) {
            if (empty($this->config['post-type'])) {
                $this->config['post-type'] = [];
            }
            $parts = explode(',', $this->config['cpt']);
            $parts = array_map('trim', $parts);
            $this->config['post-type'] = array_merge($this->config['post-type'], $parts);
        }
    }

    public function add_meta_boxes()
    {
        foreach ($this->config['post-type'] as $screen) {
            add_meta_box(
                sanitize_title($this->config['title']),
                $this->config['title'],
                [$this, 'add_meta_box_callback'],
                $screen,
                $this->config['context'],
                $this->config['priority']
            );
        }
    }

    public function admin_head()
    {
        global $typenow;
        if (in_array($typenow, $this->config['post-type'])) {
            ?><?php
        }
    }

    public function save_post($post_id)
    {
        foreach ($this->config['fields'] as $field) {
            switch ($field['type']) {
                default:
                    if (isset($_POST[$field['id']])) {
                        $sanitized = sanitize_text_field($_POST[$field['id']]);
                        update_post_meta($post_id, $field['id'], $sanitized);
                    }
            }
        }
    }

    public function add_meta_box_callback()
    {
        echo '<div class="rwp-description">' . $this->config['description'] . '</div>';
        $this->fields_table();
    }

    private function fields_table()
    {
        ?>
        <table class="form-table" role="presentation">
        <tbody><?php
        foreach ($this->config['fields'] as $field) {
            ?>
            <tr>
            <th scope="row"><?php $this->label($field); ?></th>
            <td><?php $this->field($field); ?></td>
            </tr><?php
        }
        ?></tbody>
        </table><?php
    }

    private function label($field)
    {
        switch ($field['type']) {
            default:
                printf(
                    '<label class="" for="%s">%s</label>',
                    $field['id'], $field['label']
                );
        }
    }

    private function field($field)
    {
        switch ($field['type']) {
            case 'date':
                $this->input_minmax($field);
                break;
            case 'select':
                $this->select($field);
                break;
            default:
                $this->input($field);
        }
    }

    private function input($field)
    {
        printf(
            '<input class="regular-text %s" id="%s" name="%s" %s type="%s" value="%s">',
            isset($field['class']) ? $field['class'] : '',
            $field['id'], $field['id'],
            isset($field['pattern']) ? "pattern='{$field['pattern']}'" : '',
            $field['type'],
            $this->value($field)
        );
    }

    private function input_minmax($field)
    {
        printf(
            '<input class="regular-text" id="%s" %s %s name="%s" %s type="%s" value="%s">',
            $field['id'],
            isset($field['max']) ? "max='{$field['max']}'" : '',
            isset($field['min']) ? "min='{$field['min']}'" : '',
            $field['id'],
            isset($field['step']) ? "step='{$field['step']}'" : '',
            $field['type'],
            $this->value($field)
        );
    }

    private function select($field)
    {
        printf(
            '<select id="%s" name="%s">%s</select>',
            $field['id'], $field['id'],
            $this->select_options($field)
        );
    }

    private function select_selected($field, $current)
    {
        $value = $this->value($field);
        if ($value === $current) {
            return 'selected';
        }
        return '';
    }

    private function select_options($field)
    {
        $output = [];
        $options = explode("\r\n", $field['options']);
        $i = 0;
        foreach ($options as $option) {
            $pair = explode(':', $option);
            $pair = array_map('trim', $pair);
            $output[] = sprintf(
                '<option %s value="%s"> %s</option>',
                $this->select_selected($field, $pair[0]),
                $pair[0], $pair[1]
            );
            $i++;
        }
        return implode('<br>', $output);
    }

    private function value($field)
    {
        global $post;
        if (metadata_exists('post', $post->ID, $field['id'])) {
            $value = get_post_meta($post->ID, $field['id'], true);
        } else if (isset($field['default'])) {
            $value = $field['default'];
        } else {
            return '';
        }
        return str_replace('\u0027', "'", $value);
    }

}

new FlatsomeTrustPilotReviews;


add_shortcode('TRUSTPILOT_REVIEWS', '_trsut_pilot_reviews_slider');

if (!function_exists('_trsut_pilot_reviews_slider')) {
    /**
     * Shortcode: [TRUSTPILOT_REVIEWS]
     * It display custom reviews of trust pilot data
     */
    function _trsut_pilot_reviews_slider()
    {
        $args = array(
            'post_type' => 'site-review',
            'post_status' => 'publish',
            'posts_per_page' => 10,
        );
        ob_start();
        // The Query
        $the_query = new WP_Query($args);
        $sumofReviews = $totalTrust = 0;
        $published_reviews = wp_count_posts($post_type = 'site-review')->publish;
        if ($the_query->have_posts() && !empty($published_reviews)) {
            echo '<ul class="review_slider">';
            while ($the_query->have_posts()) {
                $the_query->the_post();
                $ratingStar = get_post_meta(get_the_ID(), 'rating', true);
                $ratingDate = get_post_meta(get_the_ID(), 'date', true);
                $authorName = get_post_meta(get_the_ID(), 'author', true);
                // $post_id    = get_the_ID();
                ?>
                <?php $args = array(
                    'rating' => $ratingStar,
                    'type' => 'rating',
                    'number' => 1234,
                    );
                ?>
                <li class="review-item carousel-cell">
					<?php echo glsr_get_review(get_the_ID()); ?>
                    <?php if (!empty($authorName)) { ?><p class="review-author"><?php echo $authorName; ?></p><?php } ?></li>
                <?php
                // $totalTrust = ($sumofReviews += $ratingStar) / $published_reviews;
                // update_option('trust_pilot_avg', $totalTrust);

                // Ensure that both $sumofReviews and $ratingStar are integers
                $sumofReviews = (int)$sumofReviews;
                $ratingStar = (int)$ratingStar;

                // Perform the addition and calculate the total trust
                $totalTrust = ($sumofReviews += $ratingStar) / $published_reviews;

                // Update the option with the calculated total trust value
                update_option('trust_pilot_avg', $totalTrust);
                if ($published_reviews != 0) {
                    $totalTrust = ($sumofReviews += $ratingStar) / $published_reviews;
                    update_option('trust_pilot_avg', $totalTrust);
                } else {
                    // Handle the case where $published_reviews is zero
                    update_option('trust_pilot_avg', 0); // or some other default value
                }
            }
            echo '</ul>';
        } else {
            echo "";
        }
        $slider = ob_get_clean();
        /* Restore original Post Data */
        wp_reset_postdata();
        return $slider;
    }
}

function time_elapsed_string($datetime, $full = false)
{
    $now = new DateTime;
    $ago = new DateTime($datetime);
    $diff = $now->diff($ago);

    $diff->w = floor($diff->d / 7);
    $diff->d -= $diff->w * 7;

    $string = array(
        'y' => 'year',
        'm' => 'month',
        'w' => 'week',
        'd' => 'day',
        'h' => 'hour',
        'i' => 'minute',
        's' => 'second',
    );
    foreach ($string as $k => &$v) {
        if ($diff->$k) {
            $v = $diff->$k . ' ' . $v . ($diff->$k > 1 ? 's' : '');
        } else {
            unset($string[$k]);
        }
    }

    if (!$full) $string = array_slice($string, 0, 1);
    return $string ? implode(', ', $string) . ' ago' : 'just now';
}

if(!function_exists('get_site_review_average_rating')) {
    /**
     * get avarage rating number from total site reviews
     */
    
    function get_site_review_average_rating(){
        $args = array(
            'post_type' => 'site-review',
            'post_status' => 'publish',
            'posts_per_page' => -1,
        );
        // ob_start();
        // The Query
        
        $the_query = new WP_Query($args);

        $sumofReviews = $totalTrust = 0;

        $published_reviews = wp_count_posts($post_type = 'site-review')->publish;
        
        
        if ($the_query->have_posts()) {
            
            while ($the_query->have_posts()) {
                $the_query->the_post();
                $ratingStar = get_post_meta(get_the_ID(), 'rating', true);
                $totalTrust = ($sumofReviews += $ratingStar) / $published_reviews;
            }
            
        } else {
            echo "";
        }
        return $totalTrust;
        /* Restore original Post Data */
        wp_reset_postdata();
    }
}


add_shortcode('TRUST_PILOT_AVG', '_trust_pilot_avg_rating_box');
if (!function_exists('_trust_pilot_avg_rating_box')) {
    /**
     * Shortcode: [TRUST_PILOT_AVG]
     * It return the average of all reviews of trust pilot
     * @return false|string
     */
    function _trust_pilot_avg_rating_box()
    {
        ob_start();

        $avg = get_theme_mod('_trust_pilot_avg');
        $trustTex = '';
        if (!empty($avg)) {
            switch ($avg) {
                case (4 < $avg && 5 >= $avg):
                    if ((int)$avg == 5) {
                        $avg = 5;
                    } else {
                        $avg = 4.5;
                    }
                    $trustTex = 'Excellent';
                    break;
                case (3 < $avg && 4 >= $avg):
                    if ((int)$avg == 4) {
                        $avg = 4;
                    } else {
                        $avg = 3.5;
                    }
                    $trustTex = 'Great';
                    break;
                case (2 < $avg && 3 >= $avg):
                    if ((int)$avg == 3) {
                        $avg = 3;
                    } else {
                        $avg = 2.5;
                    }
                    $trustTex = 'Average';
                    break;
                case (1 < $avg && 2 >= $avg):
                    if ((int)$avg == 2) {
                        $avg = 2;
                    } else {
                        $avg = 1.5;
                    }
                    $trustTex = 'Poor';
                    break;
                case (0 < $avg && 1 >= $avg):
                    if ((int)$avg == 1) {
                        $avg = 1;
                    } else {
                        $avg = 1;
                    }
                    $trustTex = 'Bad';
                    break;
            }
            ?>
            <div class="trust-reviews-box">
                <a href="/service-reviews/"
                   target="_blank"><span class="h3"><?php echo $trustTex; ?></span><div class="trust-img">
                             <?php $args = array(
                                    'rating' => $avg,
                                    'type' => 'rating',
                                    'number' => 1234,
                                    );
                                wp_star_rating( $args );  ?>
                    </div>
                    <?php echo do_shortcode('[site_reviews_summary hide="bars,if_empty,stars,rating"]'); ?>
                    <!-- <span class="based-on">Based on <u
                                class="total-reviews"><?php //echo get_theme_mod('_trust_pilot_total'); ?> reviews</u></span> -->
                </a></div>
            <?php
        }
        $data = ob_get_clean();
        wp_reset_postdata();
        return $data;
    }
}

add_action('customize_register', '_trust_pilot_customizer');
if (!function_exists('_trust_pilot_customizer')) {

    function _trust_pilot_customizer($wp_customize) {
        $wp_customize->add_panel('trust_pilot_theme_option', [
            'title'         => __('Trust Pilot Theme Option', 'gma'),
            'priority'      => 160
        ]);
        $wp_customize->add_setting('_trust_pilot_avg', [
                'default'   => '4.6'
        ]);
        $wp_customize->add_setting('_trust_pilot_total', [
                'default'   => '1500 '
        ]);
        $wp_customize->add_section('_trust_pilot_theme_option', array(
            'title'         => __('Trust Pilot Settings', 'gma'),
            'panel'         => 'trust_pilot_theme_option'
        ));
        $wp_customize->add_control( new WP_Customize_Control(
            $wp_customize,
        '_trust_pilot_avg_input',
            array(
                'type'      => 'text',
                'settings'  => '_trust_pilot_avg',
                'label'     => __('Average Rating', 'gma'),
                'description' => __('Write Average Rating of Trust Pilot', 'gma'),
                'section'   => '_trust_pilot_theme_option'
            )
        ));
        $wp_customize->add_control( new WP_Customize_Control(
            $wp_customize,
        '_trust_pilot_total_input',
            array(
                'type'      => 'text',
                'settings'  => '_trust_pilot_total',
                'label'     => __('Total Reviews', 'gma'),
                'description' => __('Write Total Reviews of Trust Pilot', 'gma'),
                'section'   => '_trust_pilot_theme_option'
            )
        ));
    }
}